;/*******************************************************
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;static unsigned int time_count;
;int active = -1;
;int dir = 0;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0012 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0013     TCNT0 = 0x8B;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0014     ++time_count;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0015 
; 0000 0016     if (time_count == 50){
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0017         PORTC.0 = !PORTC.0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0018 
; 0000 0019         if (dir!=0){
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001A             if (dir==1 && active>=7)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 001B                 dir = -1;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 001C             else if (dir==-1 && active<0)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 001D                 dir = 0;
;PCODE: $0000003B VOL: 0
; 0000 001E 
; 0000 001F             active += dir;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0020 
; 0000 0021             PORTB = (active<8 && active>=0)?(1 << active):0;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0022         }
; 0000 0023 
; 0000 0024         time_count = 0;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0025     }
; 0000 0026 }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;void main(void)
; 0000 0029 {
;PCODE: $00000059 VOL: 0
; 0000 002A 
; 0000 002B DDRA= 0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 002C DDRB= 0xFF;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 002D DDRC= 1;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 002E 
; 0000 002F TCCR0= 5 ;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0030 TCNT0= 0x8B;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0031 
; 0000 0032 TIMSK= 1;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0033 
; 0000 0034 #asm("sei")
;PCODE: $00000066 VOL: 0
	sei
;PCODE: $00000067 VOL: 0
; 0000 0035 
; 0000 0036 while (1)
;PCODE: $00000068 VOL: 0
; 0000 0037       {
; 0000 0038         if (PINA.0)
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0039             dir = 1;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 003A       }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 003B }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
