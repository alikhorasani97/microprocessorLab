
AVRASM ver. 2.1.30  F:\Univeristy\Term9\Microprocessor Lab\Ali\3\Debug\List\micro-3.asm Fri Feb 05 13:17:49 2021

F:\Univeristy\Term9\Microprocessor Lab\Ali\3\Debug\List\micro-3.asm(1088): warning: Register r5 already defined by the .DEF directive
F:\Univeristy\Term9\Microprocessor Lab\Ali\3\Debug\List\micro-3.asm(1089): warning: Register r4 already defined by the .DEF directive
F:\Univeristy\Term9\Microprocessor Lab\Ali\3\Debug\List\micro-3.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0049 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 008c 	JMP  _timer1_capt_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0076 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 6570
00002b 6972
00002c 646f
00002d 3d20      	.DB  0x70,0x65,0x72,0x69,0x6F,0x64,0x20,0x3D
00002e 0020
00002f 6568
000030 6c6c
000031 206f      	.DB  0x20,0x0,0x68,0x65,0x6C,0x6C,0x6F,0x20
000032 6f77
000033 6c72
000034 0064      	.DB  0x77,0x6F,0x72,0x6C,0x64,0x0
                 _0x2000003:
000035 c080      	.DB  0x80,0xC0
                 _0x2020060:
F:\Univeristy\Term9\Microprocessor Lab\Ali\3\Debug\List\micro-3.asm(1128): warning: .cseg .db misalignment - padding zero byte
000036 0001      	.DB  0x1
                 _0x2020000:
000037 4e2d
000038 4e41
000039 4900
00003a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
F:\Univeristy\Term9\Microprocessor Lab\Ali\3\Debug\List\micro-3.asm(1131): warning: .cseg .db misalignment - padding zero byte
00003b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003c 000a      	.DW  0x0A
00003d 0160      	.DW  _0x3
00003e 0054      	.DW  _0x0*2
                 
00003f 000c      	.DW  0x0C
000040 016a      	.DW  _0x6
000041 005e      	.DW  _0x0*2+10
                 
000042 0002      	.DW  0x02
000043 0178      	.DW  __base_y_G100
000044 006a      	.DW  _0x2000003*2
                 
000045 0001      	.DW  0x01
000046 017c      	.DW  __seed_G101
000047 006c      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000048 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000049 94f8      	CLI
00004a 27ee      	CLR  R30
00004b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004c e0f1      	LDI  R31,1
00004d bffb      	OUT  GICR,R31
00004e bfeb      	OUT  GICR,R30
00004f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000050 e08d      	LDI  R24,(14-2)+1
000051 e0a2      	LDI  R26,2
000052 27bb      	CLR  R27
                 __CLEAR_REG:
000053 93ed      	ST   X+,R30
000054 958a      	DEC  R24
000055 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000056 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000057 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000058 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000059 93ed      	ST   X+,R30
00005a 9701      	SBIW R24,1
00005b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005c e7e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005e 9185      	LPM  R24,Z+
00005f 9195      	LPM  R25,Z+
000060 9700      	SBIW R24,0
000061 f061      	BREQ __GLOBAL_INI_END
000062 91a5      	LPM  R26,Z+
000063 91b5      	LPM  R27,Z+
000064 9005      	LPM  R0,Z+
000065 9015      	LPM  R1,Z+
000066 01bf      	MOVW R22,R30
000067 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000068 9005      	LPM  R0,Z+
000069 920d      	ST   X+,R0
00006a 9701      	SBIW R24,1
00006b f7e1      	BRNE __GLOBAL_INI_LOOP
00006c 01fb      	MOVW R30,R22
00006d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006f bfed      	OUT  SPL,R30
000070 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000071 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000072 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000073 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000074 940c 00eb 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#asm
                     .equ __lcd_port= 0x1B; // LCD I/O Port: PORTA
                 ; 0000 000E #endasm
                 ;
                 ;#include <lcd.h>
                 ;#include <stdlib.h>
                 ;
                 ;static unsigned int timer1_counter = 0;
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0016 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000076 93aa      	ST   -Y,R26
000077 93ba      	ST   -Y,R27
000078 93ea      	ST   -Y,R30
000079 93fa      	ST   -Y,R31
00007a b7ef      	IN   R30,SREG
00007b 93ea      	ST   -Y,R30
                 ; 0000 0017     TCNT1=0xE0C0;
00007c 940e 020f 	CALL SUBOPT_0x0
                 ; 0000 0018     ++timer1_counter;
00007e e7a6      	LDI  R26,LOW(_timer1_counter_G000)
00007f e0b1      	LDI  R27,HIGH(_timer1_counter_G000)
000080 91ed      	LD   R30,X+
000081 91fd      	LD   R31,X+
000082 9631      	ADIW R30,1
000083 93fe      	ST   -X,R31
000084 93ee      	ST   -X,R30
                 ; 0000 0019 }
000085 91e9      	LD   R30,Y+
000086 bfef      	OUT  SREG,R30
000087 91f9      	LD   R31,Y+
000088 91e9      	LD   R30,Y+
000089 91b9      	LD   R27,Y+
00008a 91a9      	LD   R26,Y+
00008b 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
                 ; 0000 001C {
                 _timer1_capt_isr:
                 ; .FSTART _timer1_capt_isr
00008c 920a      	ST   -Y,R0
00008d 921a      	ST   -Y,R1
00008e 92fa      	ST   -Y,R15
00008f 936a      	ST   -Y,R22
000090 937a      	ST   -Y,R23
000091 938a      	ST   -Y,R24
000092 939a      	ST   -Y,R25
000093 93aa      	ST   -Y,R26
000094 93ba      	ST   -Y,R27
000095 93ea      	ST   -Y,R30
000096 93fa      	ST   -Y,R31
000097 b7ef      	IN   R30,SREG
000098 93ea      	ST   -Y,R30
                 ; 0000 001D     char str[10];
                 ; 0000 001E     unsigned long period;
                 ; 0000 001F     unsigned int lcr1;
                 ; 0000 0020 
                 ; 0000 0021     lcr1 = (ICR1H*256)+ICR1L;
000099 972e      	SBIW R28,14
00009a 931a      	ST   -Y,R17
00009b 930a      	ST   -Y,R16
                 ;	str -> Y+6
                 ;	period -> Y+2
                 ;	lcr1 -> R16,R17
00009c b5e7      	IN   R30,0x27
00009d 2ffe      	MOV  R31,R30
00009e e0e0      	LDI  R30,0
00009f 01df      	MOVW R26,R30
0000a0 b5e6      	IN   R30,0x26
0000a1 e0f0      	LDI  R31,0
0000a2 0fea      	ADD  R30,R26
0000a3 1ffb      	ADC  R31,R27
0000a4 018f      	MOVW R16,R30
                 ; 0000 0022     period = ((unsigned long)(((float)lcr1)/((float)(0xffff-0xE0C0))))
                 ; 0000 0023             + ((unsigned long) timer1_counter) ;
0000a5 2766      	CLR  R22
0000a6 2777      	CLR  R23
0000a7 940e 0283 	CALL __CDF1
0000a9 01df      	MOVW R26,R30
0000aa 01cb      	MOVW R24,R22
                +
0000ab e0e0     +LDI R30 , LOW ( 0x45F9F800 )
0000ac eff8     +LDI R31 , HIGH ( 0x45F9F800 )
0000ad ef69     +LDI R22 , BYTE3 ( 0x45F9F800 )
0000ae e475     +LDI R23 , BYTE4 ( 0x45F9F800 )
                 	__GETD1N 0x45F9F800
0000af 940e 02b1 	CALL __DIVF21
0000b1 940e 024a 	CALL __CFD1U
0000b3 01df      	MOVW R26,R30
0000b4 01cb      	MOVW R24,R22
0000b5 91e0 0176 	LDS  R30,_timer1_counter_G000
0000b7 91f0 0177 	LDS  R31,_timer1_counter_G000+1
0000b9 2766      	CLR  R22
0000ba 2777      	CLR  R23
0000bb 940e 02f6 	CALL __ADDD12
                +
0000bd 83ea     +STD Y + 2 , R30
0000be 83fb     +STD Y + 2 + 1 , R31
0000bf 836c     +STD Y + 2 + 2 , R22
0000c0 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 0024 
                 ; 0000 0025 
                 ; 0000 0026     timer1_counter = 0;
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 93e0 0176 	STS  _timer1_counter_G000,R30
0000c4 93e0 0177 	STS  _timer1_counter_G000+1,R30
                 ; 0000 0027     TCNT1=0xE0C0;
0000c6 940e 020f 	CALL SUBOPT_0x0
                 ; 0000 0028 
                 ; 0000 0029     itoa(period,str);
0000c8 81ea      	LDD  R30,Y+2
0000c9 81fb      	LDD  R31,Y+2+1
0000ca 93fa      	ST   -Y,R31
0000cb 93ea      	ST   -Y,R30
0000cc 01de      	MOVW R26,R28
0000cd 9618      	ADIW R26,8
0000ce 940e 01e1 	CALL _itoa
                 ; 0000 002A 
                 ; 0000 002B     lcd_clear();
0000d0 940e 015f 	CALL _lcd_clear
                 ; 0000 002C     lcd_puts("period = ");
                +
0000d2 e6a0     +LDI R26 , LOW ( _0x3 + ( 0 ) )
0000d3 e0b1     +LDI R27 , HIGH ( _0x3 + ( 0 ) )
                 	__POINTW2MN _0x3,0
0000d4 940e 018c 	CALL _lcd_puts
                 ; 0000 002D     lcd_puts(str);
0000d6 01de      	MOVW R26,R28
0000d7 9616      	ADIW R26,6
0000d8 940e 018c 	CALL _lcd_puts
                 ; 0000 002E }
0000da 8119      	LDD  R17,Y+1
0000db 8108      	LDD  R16,Y+0
0000dc 9660      	ADIW R28,16
0000dd 91e9      	LD   R30,Y+
0000de bfef      	OUT  SREG,R30
0000df 91f9      	LD   R31,Y+
0000e0 91e9      	LD   R30,Y+
0000e1 91b9      	LD   R27,Y+
0000e2 91a9      	LD   R26,Y+
0000e3 9199      	LD   R25,Y+
0000e4 9189      	LD   R24,Y+
0000e5 9179      	LD   R23,Y+
0000e6 9169      	LD   R22,Y+
0000e7 90f9      	LD   R15,Y+
0000e8 9019      	LD   R1,Y+
0000e9 9009      	LD   R0,Y+
0000ea 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x3:
000160           	.BYTE 0xA
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0032 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0033 
                 ; 0000 0034 DDRA= 0xFF;
0000eb efef      	LDI  R30,LOW(255)
0000ec bbea      	OUT  0x1A,R30
                 ; 0000 0035 DDRC= 0xF0;
0000ed efe0      	LDI  R30,LOW(240)
0000ee bbe4      	OUT  0x14,R30
                 ; 0000 0036 PORTC.7 = 0;
0000ef 98af      	CBI  0x15,7
                 ; 0000 0037 
                 ; 0000 0038 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
0000f0 e0e3      	LDI  R30,LOW(3)
0000f1 bfe3      	OUT  0x33,R30
                 ; 0000 0039 TCNT0=0x83;
0000f2 e8e3      	LDI  R30,LOW(131)
0000f3 bfe2      	OUT  0x32,R30
                 ; 0000 003A 
                 ; 0000 003B TCCR1A= 0;
0000f4 e0e0      	LDI  R30,LOW(0)
0000f5 bdef      	OUT  0x2F,R30
                 ; 0000 003C TCCR1B=(1<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
0000f6 e8e1      	LDI  R30,LOW(129)
0000f7 bdee      	OUT  0x2E,R30
                 ; 0000 003D TCNT1=0xE0C0;
0000f8 940e 020f 	CALL SUBOPT_0x0
                 ; 0000 003E ICR1H=0x00;
0000fa e0e0      	LDI  R30,LOW(0)
0000fb bde7      	OUT  0x27,R30
                 ; 0000 003F ICR1L=0x00;
0000fc bde6      	OUT  0x26,R30
                 ; 0000 0040 
                 ; 0000 0041 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (1<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000fd e2e5      	LDI  R30,LOW(37)
0000fe bfe9      	OUT  0x39,R30
                 ; 0000 0042 
                 ; 0000 0043 lcd_init(16);
0000ff e1a0      	LDI  R26,LOW(16)
000100 940e 01ae 	CALL _lcd_init
                 ; 0000 0044 lcd_puts("hello world");
                +
000102 e6aa     +LDI R26 , LOW ( _0x6 + ( 0 ) )
000103 e0b1     +LDI R27 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW2MN _0x6,0
000104 940e 018c 	CALL _lcd_puts
                 ; 0000 0045 
                 ; 0000 0046 #asm("sei");
000106 9478      	sei
                 ; 0000 0047 
                 ; 0000 0048 
                 ; 0000 0049 while (1){
                 _0x7:
                 ; 0000 004A     TIMSK |= (1<<TICIE1) | (1<<TOIE1);
000107 b7e9      	IN   R30,0x39
000108 62e4      	ORI  R30,LOW(0x24)
000109 bfe9      	OUT  0x39,R30
                 ; 0000 004B     TIMSK &= ~(1<<TOIE0);
00010a b7e9      	IN   R30,0x39
00010b 7fee      	ANDI R30,0xFE
00010c bfe9      	OUT  0x39,R30
                 ; 0000 004C }
00010d cff9      	RJMP _0x7
                 ; 0000 004D }
                 _0xA:
00010e cfff      	RJMP _0xA
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
00016a           	.BYTE 0xC
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
00010f e0ff          ldi   r31,15
                 __lcd_delay0:
000110 95fa          dec   r31
000111 f7f1          brne  __lcd_delay0
000112 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000113 b3aa          in    r26,__lcd_direction
000114 70af          andi  r26,0xf                 ;set as input
000115 bbaa          out   __lcd_direction,r26
000116 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
000117 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000118 dff6      	RCALL __lcd_delay_G100
000119 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
00011a dff4      	RCALL __lcd_delay_G100
00011b b3a9          in    r26,__lcd_pin
00011c 98da          cbi   __lcd_port,__lcd_enable ;EN=0
00011d dff1      	RCALL __lcd_delay_G100
00011e 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
00011f dfef      	RCALL __lcd_delay_G100
000120 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000121 fda7          sbrc  r26,__lcd_busy_flag
000122 cff5          rjmp  __lcd_busy
000123 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000124 7fa0          andi  r26,0xf0
000125 2bab          or    r26,r27
000126 bbab          out   __lcd_port,r26          ;write
000127 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000128 940e 010f 	CALL __lcd_delay_G100
00012a 98da          cbi   __lcd_port,__lcd_enable ;EN=0
00012b 940e 010f 	CALL __lcd_delay_G100
00012d 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00012e 93aa      	ST   -Y,R26
00012f 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000130 b3aa          in    r26,__lcd_direction
000131 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000132 bbaa          out   __lcd_direction,r26
000133 b3bb          in    r27,__lcd_port
000134 70bf          andi  r27,0xf
000135 81a8          ld    r26,y
000136 dfed      	RCALL __lcd_write_nibble_G100
000137 81a8          ld    r26,y
000138 95a2          swap  r26
000139 dfea      	RCALL __lcd_write_nibble_G100
00013a 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
00013b 940c 01df 	JMP  _0x20A0001
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
00013d 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
00013e 940e 010f 	CALL __lcd_delay_G100
000140 b3e9          in    r30,__lcd_pin           ;read
000141 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000142 940e 010f 	CALL __lcd_delay_G100
000144 7fe0          andi  r30,0xf0
000145 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
000146 940e 010f 	CALL __lcd_delay_G100
000148 dff4      	RCALL __lcd_read_nibble_G100
000149 2fae          mov   r26,r30
00014a dff2      	RCALL __lcd_read_nibble_G100
00014b 98d9          cbi   __lcd_port,__lcd_rd     ;RD=0
00014c 95e2          swap  r30
00014d 2bea          or    r30,r26
00014e 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00014f 93aa      	ST   -Y,R26
000150 940e 0113 	CALL __lcd_ready
000152 81e8      	LD   R30,Y
000153 e0f0      	LDI  R31,0
000154 58e8      	SUBI R30,LOW(-__base_y_G100)
000155 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000156 81e0      	LD   R30,Z
000157 81a9      	LDD  R26,Y+1
000158 0fae      	ADD  R26,R30
000159 940e 012e 	CALL __lcd_write_data
00015b 8059      	LDD  R5,Y+1
00015c 8048      	LDD  R4,Y+0
00015d 9622      	ADIW R28,2
00015e 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00015f 940e 0113 	CALL __lcd_ready
000161 e0a2      	LDI  R26,LOW(2)
000162 940e 012e 	CALL __lcd_write_data
000164 940e 0113 	CALL __lcd_ready
000166 e0ac      	LDI  R26,LOW(12)
000167 940e 012e 	CALL __lcd_write_data
000169 940e 0113 	CALL __lcd_ready
00016b e0a1      	LDI  R26,LOW(1)
00016c 940e 012e 	CALL __lcd_write_data
00016e e0e0      	LDI  R30,LOW(0)
00016f 2e4e      	MOV  R4,R30
000170 2e5e      	MOV  R5,R30
000171 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000172 93aa      	ST   -Y,R26
000173 93ef          push r30
000174 93ff          push r31
000175 81a8          ld   r26,y
000176 9468          set
000177 30aa          cpi  r26,10
000178 f019          breq __lcd_putchar1
000179 94e8          clt
00017a 1457      	CP   R5,R7
00017b f030      	BRLO _0x2000004
                 	__lcd_putchar1:
00017c 9443      	INC  R4
00017d e0e0      	LDI  R30,LOW(0)
00017e 93ea      	ST   -Y,R30
00017f 2da4      	MOV  R26,R4
000180 dfce      	RCALL _lcd_gotoxy
000181 f036      	brts __lcd_putchar0
                 _0x2000004:
000182 9453      	INC  R5
000183 df8f          rcall __lcd_ready
000184 9ad8          sbi  __lcd_port,__lcd_rs ;RS=1
000185 81a8      	LD   R26,Y
000186 940e 012e 	CALL __lcd_write_data
                 __lcd_putchar0:
000188 91ff          pop  r31
000189 91ef          pop  r30
00018a 940c 01df 	JMP  _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00018c 93ba      	ST   -Y,R27
00018d 93aa      	ST   -Y,R26
00018e 931a      	ST   -Y,R17
                 _0x2000005:
00018f 81a9      	LDD  R26,Y+1
000190 81ba      	LDD  R27,Y+1+1
000191 91ed      	LD   R30,X+
000192 83a9      	STD  Y+1,R26
000193 83ba      	STD  Y+1+1,R27
000194 2f1e      	MOV  R17,R30
000195 30e0      	CPI  R30,0
000196 f019      	BREQ _0x2000007
000197 2fa1      	MOV  R26,R17
000198 dfd9      	RCALL _lcd_putchar
000199 cff5      	RJMP _0x2000005
                 _0x2000007:
00019a 8118      	LDD  R17,Y+0
00019b 9623      	ADIW R28,3
00019c 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
00019d 27aa          clr   r26
00019e 27bb          clr   r27
                 __long_delay0:
00019f 9711          sbiw  r26,1         ;2 cycles
0001a0 f7f1          brne  __long_delay0 ;2 cycles
0001a1 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
0001a2 93aa      	ST   -Y,R26
0001a3 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0001a4 b3aa          in    r26,__lcd_direction
0001a5 6fa7          ori   r26,0xf7                ;set as output
0001a6 bbaa          out   __lcd_direction,r26
0001a7 b3bb          in    r27,__lcd_port
0001a8 70bf          andi  r27,0xf
0001a9 81a8          ld    r26,y
0001aa 940e 0124 	CALL __lcd_write_nibble_G100
0001ac 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
0001ad c031      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001ae 93aa      	ST   -Y,R26
0001af 98da          cbi   __lcd_port,__lcd_enable ;EN=0
0001b0 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
0001b1 8078      	LDD  R7,Y+0
0001b2 81e8      	LD   R30,Y
0001b3 58e0      	SUBI R30,-LOW(128)
                +
0001b4 93e0 017a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001b6 81e8      	LD   R30,Y
0001b7 54e0      	SUBI R30,-LOW(192)
                +
0001b8 93e0 017b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001ba 940e 0214 	CALL SUBOPT_0x1
0001bc 940e 0214 	CALL SUBOPT_0x1
0001be 940e 0214 	CALL SUBOPT_0x1
0001c0 dfdc      	RCALL __long_delay_G100
0001c1 e2a0      	LDI  R26,LOW(32)
0001c2 dfdf      	RCALL __lcd_init_write_G100
0001c3 dfd9      	RCALL __long_delay_G100
0001c4 e2a8      	LDI  R26,LOW(40)
0001c5 940e 0219 	CALL SUBOPT_0x2
0001c7 e0a4      	LDI  R26,LOW(4)
0001c8 940e 0219 	CALL SUBOPT_0x2
0001ca e8a5      	LDI  R26,LOW(133)
0001cb 940e 0219 	CALL SUBOPT_0x2
0001cd b3aa          in    r26,__lcd_direction
0001ce 70af          andi  r26,0xf                 ;set as input
0001cf bbaa          out   __lcd_direction,r26
0001d0 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
0001d1 940e 0146 	CALL _lcd_read_byte0_G100
0001d3 30e5      	CPI  R30,LOW(0x5)
0001d4 f011      	BREQ _0x200000B
0001d5 e0e0      	LDI  R30,LOW(0)
0001d6 c008      	RJMP _0x20A0001
                 _0x200000B:
0001d7 940e 0113 	CALL __lcd_ready
0001d9 e0a6      	LDI  R26,LOW(6)
0001da 940e 012e 	CALL __lcd_write_data
0001dc 940e 015f 	CALL _lcd_clear
0001de e0e1      	LDI  R30,LOW(1)
                 _0x20A0001:
0001df 9621      	ADIW R28,1
0001e0 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0001e1 93ba      	ST   -Y,R27
0001e2 93aa      	ST   -Y,R26
0001e3 91a9          ld   r26,y+
0001e4 91b9          ld   r27,y+
0001e5 91e9          ld   r30,y+
0001e6 91f9          ld   r31,y+
0001e7 9630          adiw r30,0
0001e8 f42a          brpl __itoa0
0001e9 95e0          com  r30
0001ea 95f0          com  r31
0001eb 9631          adiw r30,1
0001ec e26d          ldi  r22,'-'
0001ed 936d          st   x+,r22
                 __itoa0:
0001ee 94e8          clt
0001ef e180          ldi  r24,low(10000)
0001f0 e297          ldi  r25,high(10000)
0001f1 d00d          rcall __itoa1
0001f2 ee88          ldi  r24,low(1000)
0001f3 e093          ldi  r25,high(1000)
0001f4 d00a          rcall __itoa1
0001f5 e684          ldi  r24,100
0001f6 2799          clr  r25
0001f7 d007          rcall __itoa1
0001f8 e08a          ldi  r24,10
0001f9 d005          rcall __itoa1
0001fa 2f6e          mov  r22,r30
0001fb d010          rcall __itoa5
0001fc 2766          clr  r22
0001fd 936c          st   x,r22
0001fe 9508          ret
                 
                 __itoa1:
0001ff 2766          clr	 r22
                 __itoa2:
000200 17e8          cp   r30,r24
000201 07f9          cpc  r31,r25
000202 f020          brlo __itoa3
000203 9563          inc  r22
000204 1be8          sub  r30,r24
000205 0bf9          sbc  r31,r25
000206 f7c9          brne __itoa2
                 __itoa3:
000207 2366          tst  r22
000208 f411          brne __itoa4
000209 f016          brts __itoa5
00020a 9508          ret
                 __itoa4:
00020b 9468          set
                 __itoa5:
00020c 5d60          subi r22,-0x30
00020d 936d          st   x+,r22
00020e 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _timer1_counter_G000:
000176           	.BYTE 0x2
                 __base_y_G100:
000178           	.BYTE 0x4
                 __seed_G101:
00017c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00020f ece0      	LDI  R30,LOW(57536)
000210 eef0      	LDI  R31,HIGH(57536)
000211 bdfd      	OUT  0x2C+1,R31
000212 bdec      	OUT  0x2C,R30
000213 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000214 940e 019d 	CALL __long_delay_G100
000216 e3a0      	LDI  R26,LOW(48)
000217 940c 01a2 	JMP  __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000219 940e 012e 	CALL __lcd_write_data
00021b 940c 019d 	JMP  __long_delay_G100
                 
                 
                 	.CSEG
                 __ROUND_REPACK:
00021d 2355      	TST  R21
00021e f442      	BRPL __REPACK
00021f 3850      	CPI  R21,0x80
000220 f411      	BRNE __ROUND_REPACK0
000221 ffe0      	SBRS R30,0
000222 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000223 9631      	ADIW R30,1
000224 1f69      	ADC  R22,R25
000225 1f79      	ADC  R23,R25
000226 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000227 e850      	LDI  R21,0x80
000228 2757      	EOR  R21,R23
000229 f411      	BRNE __REPACK0
00022a 935f      	PUSH R21
00022b c073      	RJMP __ZERORES
                 __REPACK0:
00022c 3f5f      	CPI  R21,0xFF
00022d f031      	BREQ __REPACK1
00022e 0f66      	LSL  R22
00022f 0c00      	LSL  R0
000230 9557      	ROR  R21
000231 9567      	ROR  R22
000232 2f75      	MOV  R23,R21
000233 9508      	RET
                 __REPACK1:
000234 935f      	PUSH R21
000235 2000      	TST  R0
000236 f00a      	BRMI __REPACK2
000237 c073      	RJMP __MAXRES
                 __REPACK2:
000238 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000239 e850      	LDI  R21,0x80
00023a 2e19      	MOV  R1,R25
00023b 2215      	AND  R1,R21
00023c 0f88      	LSL  R24
00023d 1f99      	ROL  R25
00023e 2795      	EOR  R25,R21
00023f 0f55      	LSL  R21
000240 9587      	ROR  R24
                 
                 __UNPACK1:
000241 e850      	LDI  R21,0x80
000242 2e07      	MOV  R0,R23
000243 2205      	AND  R0,R21
000244 0f66      	LSL  R22
000245 1f77      	ROL  R23
000246 2775      	EOR  R23,R21
000247 0f55      	LSL  R21
000248 9567      	ROR  R22
000249 9508      	RET
                 
                 __CFD1U:
00024a 9468      	SET
00024b c001      	RJMP __CFD1U0
                 __CFD1:
00024c 94e8      	CLT
                 __CFD1U0:
00024d 935f      	PUSH R21
00024e dff2      	RCALL __UNPACK1
00024f 3870      	CPI  R23,0x80
000250 f018      	BRLO __CFD10
000251 3f7f      	CPI  R23,0xFF
000252 f408      	BRCC __CFD10
000253 c04b      	RJMP __ZERORES
                 __CFD10:
000254 e156      	LDI  R21,22
000255 1b57      	SUB  R21,R23
000256 f4aa      	BRPL __CFD11
000257 9551      	NEG  R21
000258 3058      	CPI  R21,8
000259 f40e      	BRTC __CFD19
00025a 3059      	CPI  R21,9
                 __CFD19:
00025b f030      	BRLO __CFD17
00025c efef      	SER  R30
00025d efff      	SER  R31
00025e ef6f      	SER  R22
00025f e77f      	LDI  R23,0x7F
000260 f977      	BLD  R23,7
000261 c01a      	RJMP __CFD15
                 __CFD17:
000262 2777      	CLR  R23
000263 2355      	TST  R21
000264 f0b9      	BREQ __CFD15
                 __CFD18:
000265 0fee      	LSL  R30
000266 1fff      	ROL  R31
000267 1f66      	ROL  R22
000268 1f77      	ROL  R23
000269 955a      	DEC  R21
00026a f7d1      	BRNE __CFD18
00026b c010      	RJMP __CFD15
                 __CFD11:
00026c 2777      	CLR  R23
                 __CFD12:
00026d 3058      	CPI  R21,8
00026e f028      	BRLO __CFD13
00026f 2fef      	MOV  R30,R31
000270 2ff6      	MOV  R31,R22
000271 2f67      	MOV  R22,R23
000272 5058      	SUBI R21,8
000273 cff9      	RJMP __CFD12
                 __CFD13:
000274 2355      	TST  R21
000275 f031      	BREQ __CFD15
                 __CFD14:
000276 9576      	LSR  R23
000277 9567      	ROR  R22
000278 95f7      	ROR  R31
000279 95e7      	ROR  R30
00027a 955a      	DEC  R21
00027b f7d1      	BRNE __CFD14
                 __CFD15:
00027c 2000      	TST  R0
00027d f40a      	BRPL __CFD16
00027e d07c      	RCALL __ANEGD1
                 __CFD16:
00027f 915f      	POP  R21
000280 9508      	RET
                 
                 __CDF1U:
000281 9468      	SET
000282 c001      	RJMP __CDF1U0
                 __CDF1:
000283 94e8      	CLT
                 __CDF1U0:
000284 9730      	SBIW R30,0
000285 4060      	SBCI R22,0
000286 4070      	SBCI R23,0
000287 f0b1      	BREQ __CDF10
000288 2400      	CLR  R0
000289 f026      	BRTS __CDF11
00028a 2377      	TST  R23
00028b f412      	BRPL __CDF11
00028c 9400      	COM  R0
00028d d06d      	RCALL __ANEGD1
                 __CDF11:
00028e 2e17      	MOV  R1,R23
00028f e17e      	LDI  R23,30
000290 2011      	TST  R1
                 __CDF12:
000291 f032      	BRMI __CDF13
000292 957a      	DEC  R23
000293 0fee      	LSL  R30
000294 1fff      	ROL  R31
000295 1f66      	ROL  R22
000296 1c11      	ROL  R1
000297 cff9      	RJMP __CDF12
                 __CDF13:
000298 2fef      	MOV  R30,R31
000299 2ff6      	MOV  R31,R22
00029a 2d61      	MOV  R22,R1
00029b 935f      	PUSH R21
00029c df8a      	RCALL __REPACK
00029d 915f      	POP  R21
                 __CDF10:
00029e 9508      	RET
                 
                 __ZERORES:
00029f 27ee      	CLR  R30
0002a0 27ff      	CLR  R31
0002a1 2766      	CLR  R22
0002a2 2777      	CLR  R23
0002a3 915f      	POP  R21
0002a4 9508      	RET
                 
                 __MINRES:
0002a5 efef      	SER  R30
0002a6 efff      	SER  R31
0002a7 e76f      	LDI  R22,0x7F
0002a8 ef7f      	SER  R23
0002a9 915f      	POP  R21
0002aa 9508      	RET
                 
                 __MAXRES:
0002ab efef      	SER  R30
0002ac efff      	SER  R31
0002ad e76f      	LDI  R22,0x7F
0002ae e77f      	LDI  R23,0x7F
0002af 915f      	POP  R21
0002b0 9508      	RET
                 
                 __DIVF21:
0002b1 935f      	PUSH R21
0002b2 df86      	RCALL __UNPACK
0002b3 3870      	CPI  R23,0x80
0002b4 f421      	BRNE __DIVF210
0002b5 2011      	TST  R1
                 __DIVF211:
0002b6 f40a      	BRPL __DIVF219
0002b7 cfed      	RJMP __MINRES
                 __DIVF219:
0002b8 cff2      	RJMP __MAXRES
                 __DIVF210:
0002b9 3890      	CPI  R25,0x80
0002ba f409      	BRNE __DIVF218
                 __DIVF217:
0002bb cfe3      	RJMP __ZERORES
                 __DIVF218:
0002bc 2401      	EOR  R0,R1
0002bd 9408      	SEC
0002be 0b97      	SBC  R25,R23
0002bf f41b      	BRVC __DIVF216
0002c0 f3d4      	BRLT __DIVF217
0002c1 2000      	TST  R0
0002c2 cff3      	RJMP __DIVF211
                 __DIVF216:
0002c3 2f79      	MOV  R23,R25
0002c4 931f      	PUSH R17
0002c5 932f      	PUSH R18
0002c6 933f      	PUSH R19
0002c7 934f      	PUSH R20
0002c8 2411      	CLR  R1
0002c9 2711      	CLR  R17
0002ca 2722      	CLR  R18
0002cb 2733      	CLR  R19
0002cc 2744      	CLR  R20
0002cd 2755      	CLR  R21
0002ce e290      	LDI  R25,32
                 __DIVF212:
0002cf 17ae      	CP   R26,R30
0002d0 07bf      	CPC  R27,R31
0002d1 0786      	CPC  R24,R22
0002d2 0741      	CPC  R20,R17
0002d3 f030      	BRLO __DIVF213
0002d4 1bae      	SUB  R26,R30
0002d5 0bbf      	SBC  R27,R31
0002d6 0b86      	SBC  R24,R22
0002d7 0b41      	SBC  R20,R17
0002d8 9408      	SEC
0002d9 c001      	RJMP __DIVF214
                 __DIVF213:
0002da 9488      	CLC
                 __DIVF214:
0002db 1f55      	ROL  R21
0002dc 1f22      	ROL  R18
0002dd 1f33      	ROL  R19
0002de 1c11      	ROL  R1
0002df 1faa      	ROL  R26
0002e0 1fbb      	ROL  R27
0002e1 1f88      	ROL  R24
0002e2 1f44      	ROL  R20
0002e3 959a      	DEC  R25
0002e4 f751      	BRNE __DIVF212
0002e5 01f9      	MOVW R30,R18
0002e6 2d61      	MOV  R22,R1
0002e7 914f      	POP  R20
0002e8 913f      	POP  R19
0002e9 912f      	POP  R18
0002ea 911f      	POP  R17
0002eb 2366      	TST  R22
0002ec f032      	BRMI __DIVF215
0002ed 0f55      	LSL  R21
0002ee 1fee      	ROL  R30
0002ef 1fff      	ROL  R31
0002f0 1f66      	ROL  R22
0002f1 957a      	DEC  R23
0002f2 f243      	BRVS __DIVF217
                 __DIVF215:
0002f3 df29      	RCALL __ROUND_REPACK
0002f4 915f      	POP  R21
0002f5 9508      	RET
                 
                 __ADDD12:
0002f6 0fea      	ADD  R30,R26
0002f7 1ffb      	ADC  R31,R27
0002f8 1f68      	ADC  R22,R24
0002f9 1f79      	ADC  R23,R25
0002fa 9508      	RET
                 
                 __ANEGD1:
0002fb 95f0      	COM  R31
0002fc 9560      	COM  R22
0002fd 9570      	COM  R23
0002fe 95e1      	NEG  R30
0002ff 4fff      	SBCI R31,-1
000300 4f6f      	SBCI R22,-1
000301 4f7f      	SBCI R23,-1
000302 9508      	RET
                 
                 __CWD1:
000303 2f6f      	MOV  R22,R31
000304 0f66      	ADD  R22,R22
000305 0b66      	SBC  R22,R22
000306 2f76      	MOV  R23,R22
000307 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  15 r1 :  14 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   3 r17:  11 r18:   5 r19:   4 r20:   6 r21:  40 r22:  51 r23:  38 
r24:  23 r25:  20 r26:  74 r27:  25 r28:   8 r29:   1 r30: 124 r31:  47 
x  :  11 y  :  78 z  :   8 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   4 
adiw  :  10 and   :   2 andi  :   7 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   1 brmi  :   3 brne  :  14 brpl  :   6 brsh  :   0 brtc  :   1 
brts  :   3 brvc  :   1 brvs  :   2 bset  :   0 bst   :   0 call  :  40 
cbi   :  11 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  24 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   6 
cp    :   3 cpc   :   4 cpi   :  12 cpse  :   0 dec   :   7 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  14 inc   :   3 jmp   :  26 ld    :  33 ldd   :  11 ldi   :  68 
lds   :   2 lpm   :   7 lsl   :   9 lsr   :   1 mov   :  22 movw  :  12 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   3 out   :  26 pop   :  12 push  :  11 rcall :  25 ret   :  25 
reti  :   2 rjmp  :  23 rol   :  19 ror   :   7 sbc   :   6 sbci  :   6 
sbi   :   9 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   1 
sbrs  :   1 sec   :   2 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  40 std   :   6 sts   :   4 sub   :   3 subi  :   5 swap  :   2 
tst   :  11 wdr   :   0 
Instructions used: 70 out of 116 (60.3%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000610   1490     62   1552   16384   9.5%
[.dseg] 0x000060 0x000180      0     32     32    1024   3.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
